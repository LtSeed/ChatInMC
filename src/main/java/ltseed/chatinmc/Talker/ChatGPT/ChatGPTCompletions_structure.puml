@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": false,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": false,
    "cutConstructors": false
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": false, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "ltseed.chatinmc.Talker.ChatGPT.ChatGPTCompletions",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1438026963 { 
   	label=chatinmc
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_1966903370 { 
   	label=Utils
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   Request685466037[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Request</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ get(url: String, header: Map&lt;String, String&gt;): JSONObject</TD></TR>
<TR><TD ALIGN="LEFT" >+ post(url: String, header: Map&lt;String, String&gt;, params: Map&lt;String, Object&gt;): JSONObject</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_890550284 { 
   	label=Talker
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   ChatGPTBuilder1485060316[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ChatGPTBuilder</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   best_of: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   dialogTime: Long [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   frequency_penalty: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   logit_bias: Map&lt;String, String&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   logprobs: Integer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   max_tokens: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   model: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   n: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   presence_penalty: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   suffix: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   temperature: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   top_p: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># ChatGPTBuilder()</TD></TR>
<TR><TD ALIGN="LEFT" >+ ChatGPTBuilder(askBuilder: ChatGPTBuilder)</TD></TR>
<TR><TD ALIGN="LEFT" >+ build(player: Player): Talkative</TD></TR>
<TR><TD ALIGN="LEFT" >+ getBest_of(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDefault(): ChatGPTBuilder</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDialogTime(): Long</TD></TR>
<TR><TD ALIGN="LEFT" >+ getFrequency_penalty(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ getLogit_bias(): Map&lt;String, String&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getLogprobs(): Integer</TD></TR>
<TR><TD ALIGN="LEFT" >+ getMax_tokens(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getModel(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getN(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getPresence_penalty(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSuffix(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTemperature(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTop_p(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ readFile(yml_file: YamlConfiguration)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setBest_of(best_of: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDialogTime(dialogTime: Long)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setFrequency_penalty(frequency_penalty: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setLogit_bias(logit_bias: Map&lt;String, String&gt;)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setLogprobs(logprobs: Integer)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setMax_tokens(max_tokens: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setModel(model: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setN(n: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setPresence_penalty(presence_penalty: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setSuffix(suffix: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setTemperature(temperature: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setTop_p(top_p: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ writeFile(yml_file: YamlConfiguration)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ChatGPTChatUsingProxy1485060316[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ChatGPTChatUsingProxy</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   header: Map&lt;String, String&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   params: Map&lt;String, Object&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ ChatGPTChatUsingProxy(sessionId: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ chat(string: String): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ setKey(key: String)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ChatGPTCompletions1485060316[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ChatGPTCompletions</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   best_of: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   frequency_penalty: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   logit_bias: Map&lt;String, String&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   logprobs: Integer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   max_tokens: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   model: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   n: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   presence_penalty: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   suffix: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   temperature: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   top_p: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># ChatGPTCompletions(model: String, suffix: String, max_tokens: int, temperature: double, top_p: int, n: int, logprobs: Integer, presence_penalty: double, frequency_penalty: double, best_of: int, logit_bias: Map&lt;String, String&gt;)</TD></TR>
<TR><TD ALIGN="LEFT" >+ ask(prompt: String, key: String): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ chat(string: String): String</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

DialogFlowTalker1678276613[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)DialogFlowTalker</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   projectId: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   sessionId: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   sessionsClient: SessionsClient [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ DialogFlowTalker(projectId: String, sessionId: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ chat(string: String): String</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

MessageBuilder179301375[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(I)MessageBuilder</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ build(talker: Player): Talkative</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#F1E5FD"
];

Talkative179301375[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(I)Talkative</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ chat(string: String): String</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#F1E5FD"
];
} 
} 

'edges    
ChatGPTBuilder1485060316 -> ChatGPTCompletions1485060316[label="build() -> ChatGPTCompletions()"];
ChatGPTCompletions1485060316 -> ChatGPTBuilder1485060316[label="ask() -> getDefault()"];
ChatGPTCompletions1485060316 -> Request685466037[label="ask() -> post()"];
MessageBuilder179301375 -> ChatGPTBuilder1485060316[arrowhead=none, arrowtail=empty, dir=both];
Talkative179301375 -> ChatGPTChatUsingProxy1485060316[arrowhead=none, arrowtail=empty, dir=both];
Talkative179301375 -> ChatGPTCompletions1485060316[arrowhead=none, arrowtail=empty, dir=both];
Talkative179301375 -> DialogFlowTalker1678276613[arrowhead=none, arrowtail=empty, dir=both];
    
}
@enduml