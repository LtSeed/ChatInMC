package ltseed.chatinmc.Talker.ChatGPT;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import ltseed.chatinmc.Talker.Talkative;
import ltseed.chatinmc.Utils.Config;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import static ltseed.chatinmc.Utils.Request.post;

/**
 * This class represents the OpenAI GPT-3 API using the "completions" endpoint. It implements the Talkative interface,
 * which means it can be used for chatbots or conversation agents that can chat with users.
 * The class has several fields that represent the various parameters that can be used when sending a request to the API.
 * The ask() method sends a request to the API and returns the response, which is the completed text generated by the API
 * based on the given prompt and parameters.
 * The class also has a chat() method that can be used to chat with the API using a default API key specified in the
 * Config class. This method simply calls the ask() method with the given text and the default API key.
 * Note that this class assumes the use of the "completions" endpoint and sets the endpoint URL accordingly. If a different
 * endpoint is to be used, a separate class should be created for that endpoint.
 *
 * @author ltseed
 * @version 1.0
 */
public class ChatGPTCompletions implements Talkative {

    /**
     * Whether or not to use a proxy when making requests to the API
     */
    public static final boolean GPT_USE_PROXY = true;
    /**
     * The name of the GPT-3 model to use for generating text
     */
    private final String model;
    /**
     * A suffix to add to the prompt before sending it to the API
     */
    private final String suffix;
    /**
     * The maximum number of tokens to generate in the completed text
     */
    private final int max_tokens;
    /**
     * The "temperature" of the generation process, which controls the randomness of the generated text
     */
    private final double temperature;
    /**
     * The "top_p" parameter of the generation process, which controls the diversity of the generated text
     */
    private final int top_p;
    /**
     * The "n" parameter of the generation process, which controls the number of completions to generate
     */
    private final int n;
    /**
     * Whether or not to include log probabilities in the response from the API
     */
    private final Integer logprobs;
    /**
     * The "presence_penalty" parameter of the generation process, which controls the avoidance of repeating the same text
     */
    private final double presence_penalty;
    /**
     * The "frequency_penalty" parameter of the generation process, which controls the avoidance of using similar phrases
     */
    private final double frequency_penalty;
    /**
     * The "best_of" parameter of the generation process, which controls how many completions to return
     */
    private final int best_of;
    /**
     * A map of logit biases to apply to the generation process
     */
    private final Map<String, String> logit_bias;

    /**
     * Constructor for ChatGPTCompletions. Takes in various parameters that can be used to send a request to the API.
     *
     * @param model             the model to use for generating text
     * @param suffix            the suffix to add to the prompt before generating text
     * @param max_tokens        the maximum number of tokens to generate
     * @param temperature       the temperature to use when generating text
     * @param top_p             the top_p to use when generating text
     * @param n                 the number of completions to generate
     * @param logprobs          whether to include log probabilities when generating text
     * @param presence_penalty  the presence penalty to use when generating text
     * @param frequency_penalty the frequency penalty to use when generating text
     * @param best_of           the number of best completions to return
     * @param logit_bias        the logit bias to use when generating text
     */
    protected ChatGPTCompletions(String model, String suffix, int max_tokens, double temperature, int top_p, int n, Integer logprobs, double presence_penalty, double frequency_penalty, int best_of, Map<String, String> logit_bias) {
        this.model = model;
        this.suffix = suffix;
        this.max_tokens = max_tokens;
        this.temperature = temperature;
        this.top_p = top_p;
        this.n = n;
        this.logprobs = logprobs;
        this.presence_penalty = presence_penalty;
        this.frequency_penalty = frequency_penalty;
        this.best_of = best_of;
        this.logit_bias = logit_bias;
    }

    /**
     * Sends a request to the OpenAI GPT-3 API using the "completions" endpoint with the given prompt and API key.
     * Returns the completed text generated by the API based on the prompt and parameters set in this object.
     *
     * @param prompt the prompt to be sent to the API
     * @param key    the API key to be used for authentication
     * @return the completed text generated by the API
     */
    public String ask(String prompt, String key) {
        HashMap<String, String> stringStringHashMap = new HashMap<>();
        stringStringHashMap.put("Authorization", "Bearer " + key);
        stringStringHashMap.put("Content-Type", "application/json");
        HashMap<String, Object> params = new HashMap<>();
        ChatGPTBuilder aDefault = ChatGPTBuilder.getDefault();
        params.put("prompt", prompt);
        if (!Objects.equals(this.model, aDefault.model)) params.put("model", this.model);
        if (!Objects.equals(this.suffix, aDefault.suffix)) params.put("suffix", this.suffix);
        if (!Objects.equals(this.max_tokens, 16)) params.put("max_tokens", this.max_tokens);
        if (!Objects.equals(this.temperature, aDefault.temperature)) params.put("temperature", this.temperature);
        if (!Objects.equals(this.top_p, aDefault.top_p)) params.put("top_p", this.top_p);
        if (!Objects.equals(this.n, aDefault.n)) params.put("n", this.n);
        if (!Objects.equals(this.logprobs, aDefault.logprobs)) params.put("logprobs", this.logprobs);
        if (!Objects.equals(this.presence_penalty, aDefault.presence_penalty))
            params.put("presence_penalty", this.presence_penalty);
        if (!Objects.equals(this.frequency_penalty, aDefault.frequency_penalty))
            params.put("frequency_penalty", this.frequency_penalty);
        if (!Objects.equals(this.best_of, aDefault.best_of)) params.put("best_of", this.best_of);
        if (!Objects.equals(this.logit_bias, aDefault.logit_bias)) params.put("logit_bias", this.logit_bias);
        System.out.println(params);
        String url = "https://api.openai.com/v1/completions";
        if (GPT_USE_PROXY) url = url.replace("openai", "openai-proxy");
        JSONObject request = post(url, stringStringHashMap, params);
        System.out.println(request);
        if (request == null) return null;
        JSONArray choices = request.getJSONArray("choices");
        JSONObject text = choices.getJSONObject(0);
        return text.getString("text");
    }

    /**
     * Sends a request to the OpenAI GPT-3 API using the "completions" endpoint with the given text and the default API key
     * specified in the Config class. Returns the completed text generated by the API based on the prompt and parameters set
     * in this object.
     *
     * @param string the text to be sent to the API
     * @return the completed text generated by the API
     */
    @Override
    public String chat(String string) {
        return ask(string, Config.chatGPT_key);
    }
}
